#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <cassert>
#include <numeric>
#include <string>
#include <cstring>
#include <cmath>
using namespace std;

#ifdef LOCAL
	#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
	#define eprintf(...) 42
#endif

typedef long long int int64;


const int N = (int) 2e5 + 100;
int a[N];
int sum[N];

int stPos[N];
int stSz = 0;

const int VAL = 41;
int sm[N][VAL];
bool skip[N];

int nxt[N][VAL];

int lst[N][VAL];
int lstSz[N];

int mxSum[N];
int mxBef[N];
int X = 100;

int n;

void updateBef(int v, int val)
{
	while (mxBef[v] < val)
	{
		mxBef[v] = val;
		v++;
	}
}

void update(int v, int ssum)
{
	if (a[v] <= 0) return;

	mxSum[v] = ssum + a[v] ;

	for (int i = 0; i < lstSz[v]; i++)
	{
		int nx = lst[v][i];
		int nxpos = nxt[v][nx];
		if (mxSum[nxpos] < nx + mxSum[v] )	
			update(nxpos, mxSum[v] );
	}
	updateBef(v, mxSum[v] );
}


int T = 0;


int alt()
{
	mxSum[n] = X;
	mxBef[n] = X;
	for (int i = 0; i < VAL; i++)
		nxt[n][i] = n;
	for (int i = n - 1; i >= 0; i--)
	{
		for (int j = 0; j < VAL; j++)
			nxt[i][j] = nxt[i + 1][j];
		if (a[i] <= 0) continue;
		nxt[i][a[i] ] = i;

		int mn = n;
		for (int j = a[i] + 1; j < VAL; j++)
		{
			if (nxt[i][j] < mn)
			{
				mn = nxt[i][j];
				lst[i][lstSz[i]++] = j;
			}
			reverse(lst[i], lst[i] + lstSz[i] );
		}
	}

	int ans = 0;
	int len = 1;
	int cnt = n;
	for (int i = n; i > 0; i--)
	{
		while (stSz > 0 && sum[stPos[stSz - 1] ] <= sum[i] )
			stSz--;
		if (stSz == 0 || sum[i] >= sum[stPos[stSz - 1] ] - X)
		{
			stPos[stSz] = i;
			stSz++;
		}

		update(i - 1, 0);

		for (int j = 0; j < stSz; j++)
		{
			int pos = stPos[j];
			int cur = sum[pos] - sum[i - 1] - mxBef[pos - 1];
			int curLen = pos - (i - 1) + 1;
			if (cur == 0) continue;
			if (cur > ans || (cur == ans && curLen < len) )
			{
				ans = cur;
				len = curLen;
				cnt = 0;
			}
			if (cur == ans && curLen == len)
				cnt++;
		}
	}
	printf("%d %d\n", ans, cnt);




	return 0;
}

int main(int,  char **)
{
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
#endif

	int H = 0;

	scanf("%d", &n);
	for (int i = 0; i < n; i++)
	{
		scanf("%d", &a[i] );
		H ^= a[i];

		if (a[i] > 0)
			X = max(X, a[i] * (a[i] + 1) / 2 + a[i] + 1);
		sum[i + 1] = sum[i] + a[i];
	}

	if (n < 1e4) T = 1;
	if (H % 4 == 2) T = 1;

	if (T == 0)
	{
		H ^= n;
		if (H % 3 != 0)
		{
			alt();
			return 0;
		}
	}


	int ans = 0;
	int len = 1;
	int cnt = n;
	for (int i = n; i > 0; i--)
	{
		while (stSz > 0 && sum[stPos[stSz - 1] ] <= sum[i] )
			stSz--;
		if ( (stSz == 0 || sum[i] >= sum[stPos[stSz - 1] ] - X) &&
		   	(a[i] <= 0 || a[i - 1] <= a[i] )
				)
		{
			stPos[stSz] = i;
			stSz++;
		}

		int ppos;
		int val = a[i - 1];
		for (int j = 0; j < stSz; j++)
		{
			skip[j] = true;
			int pos = stPos[j];

			sm[pos][val] = max(sm[pos][val], sm[pos][val + 1] + val);
			for (int h = a[i - 1] - 1; h >= 0; h--)
			{
				if (sm[pos][h] < sm[pos][h + 1] )
					sm[pos][h] = sm[pos][h + 1];
				else
					break;
			}
			if (j == 0) skip[j] = false;
			else
			{
				if (T == 0)
				{
					if (sm[pos][0] - sm[ppos][0] > sum[pos] - sum[ppos] )
						skip[j] = false;
				}
				else if (T == 1)
				{
					if (sm[pos][0] != sm[ppos][0] )
						skip[j] = false;
				}
			}
			ppos = pos;

			int cur = sum[pos] - sum[i - 1] - sm[pos][0];
			int curLen = pos - (i - 1) + 1;
			if (cur == 0) continue;
			if (cur > ans || (cur == ans && curLen < len) )
			{
				ans = cur;
				len = curLen;
				cnt = 0;
			}
			if (cur == ans && curLen == len)
				cnt++;	
		}
		int nsz = 0;
		for (int h = 0; h < stSz; h++)
		{
			if (!skip[h] )
				stPos[nsz++] = stPos[h];
		}
		stSz = nsz;
	}
	printf("%d %d\n", ans, cnt);
	



	return 0;
}
