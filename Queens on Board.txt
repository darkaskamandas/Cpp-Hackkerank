#include <set>
#include <map>
#include <list>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <ctime>
#include <deque>
#include <bitset>
#include <cctype>
#include <utility>
#include <cassert>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int ui;
typedef unsigned long long ull;

#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)
#define Fit(i,v) For(__typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)
#define Fitd(i,v) For(__typeof((v).rbegin()) i = (v).rbegin(); i != (v).rend(); ++i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))

template<class F, class T> T convert(F a, int p = -1) { stringstream ss; if (p >= 0) ss << fixed << setprecision(p); ss << a; T r; ss >> r; return r; }
template<class T> T gcd(T a, T b) { T r; while (b != 0) { r = a % b; a = b; b = r; } return a; }
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
template<class T> T sqr(T x) { return x * x; }
template<class T> T cube(T x) { return x * x * x; }
template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s); }
const int bfsz = 1 << 16; char bf[bfsz + 5]; int rsz = 0;int ptr = 0;
char gc() { if (rsz <= 0) { ptr = 0; rsz = (int) fread(bf, 1, bfsz, stdin); if (rsz <= 0) return EOF; } --rsz; return bf[ptr++]; }
void ga(char &c) { c = EOF; while (!isalpha(c)) c = gc(); }
int gs(char s[]) { int l = 0; char c = gc(); while (isspace(c)) c = gc(); while (c != EOF && !isspace(c)) { s[l++] = c; c = gc(); } s[l] = '\0'; return l; }
template<class T> bool gi(T &v) {
    v = 0; char c = gc(); while (c != EOF && c != '-' && !isdigit(c)) c = gc(); if (c == EOF) return false; bool neg = c == '-'; if (neg) c = gc();
    while (isdigit(c)) { v = v * 10 + c - '0'; c = gc(); } if (neg) v = -v; return true;
}

typedef pair<int, int> II;

const ld PI = acos(ld(-1.0));
const ld eps = 1e-9;

const int inf = (int)1e9 + 5;
const ll linf = (ll)1e17 + 5;
int dr[8] = {-1, +1, 0, 0, +1, +1, -1, -1};
int dc[8] = {0, 0, +1, -1, -1, +1, -1, +1};
const int mod = 1000000007;

#define maxn 1000005

int n, m;
int f[55][1 << 5][1 << 5][1 << 5];
int nex[3][1 << 5], a[105], b[105];
string s[105];
bool can[1 << 5][1 << 5];

int cal0(int A){
	return A;
}

int cal1(int A, int num){
	int res = 0;
	For(i, 1, num - 1) if(getbit(A, i)) res = onbit(res, i - 1);
	return res;
}

int cal2(int A, int num){
	int res = 0;
	For(i, 0, num - 2) if(getbit(A, i)) res = onbit(res, i + 1);
	return res;
}

void add(int &a, int b){
	a += b;
	if(a >= mod) a -= mod;
}

void solve(){
	cin >> n >> m;
	Rep(mask, (1 << m)){
		nex[0][mask] = mask;
		nex[1][mask] = cal1(mask, m);
		nex[2][mask] = cal2(mask, m);
	}

	ms(can, 0);
	Rep(mask, 1 << m){
		Rep(M, 1 << m) if((mask & M) == M){
			can[mask][M] = 1;
			Rep(i, m) For(j, i + 1, m - 1) if(getbit(M, i) & getbit(M, j)){
				bool ok = false;
				For(k, i, j) if(!getbit(mask, k)) ok = true;
				if(!ok) can[mask][M] = 0;
			}
		}
	}

	ms(f, 0); f[0][0][0][0] = 1;
	Rep(i, n) {
		cin >> s[i];
		a[i] = 0;
		b[i] = 0;
		Rep(j, m) {
			if(s[i][j] == '.') a[i] = onbit(a[i], j);
			else b[i] = onbit(b[i], j);
		}
	}
	Rep(i, n) Rep(mask1, (1 << m)) Rep(mask2, (1 << m)) Rep(mask3, (1 << m)) if(f[i][mask1][mask2][mask3]){
		int M1, M2, M3;
		int mask = (mask1 | mask2 | mask3);
		Rep(m, (1 << m)) if(can[a[i]][m] && (mask & m) == 0){
			M1 = nex[0][(mask1 | m) & a[i]];
			M2 = nex[1][(mask2 | m) & a[i]];
			M3 = nex[2][(mask3 | m) & a[i]];
			add(f[i + 1][M1][M2][M3], f[i][mask1][mask2][mask3]);
		}
	}

	int res = -1;
	Rep(mask1, (1 << m)) Rep(mask2, (1 << m)) Rep(mask3, (1 << m)) {
		add(res, f[n][mask1][mask2][mask3]);
	}
	cout << res << endl;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//    freopen("in.txt", "r", stdin);
	int test;
	cin >> test;
	Rep(itest, test){
		solve();
	}

    return 0;
}