#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename T,typename U> ostream& operator<< ( ostream &o,pair<T,U> v ) {

    return o<<"("<<v.first<<", "<<v.second<<")";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int n,k;
        cin>>n>>k;
        vi a ( n );
        cin>>a;
        deque<pii> d;
        vi res;
        rep ( i,k ) {
            while ( !d.empty() && a[i]>d.back().first )
                d.pop_back();
            d.push_back ( mp ( a[i],i ) );
        }
        reu ( i,k,n ) {
//             cout<<vpii ( all ( d ) );
            res.push_back ( d.front().first );
            if ( d.front().second==i-k ) d.pop_front();
            while ( !d.empty() && a[i]>d.back().first )
                d.pop_back();
            d.push_back ( mp ( a[i],i ) );

        }
        res.push_back ( d.front().first );
        cout<<res;
    }
}