#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }

pii dfs1(int i, int p, const vector<vector<pair<int, int> > > &gw, const vector<bool> &mark) {
	pii r = mark[i] ? mp(0, i) : mp(-INF, -1);
	each(j, gw[i]) if(j->first != p) {
		pii u = dfs1(j->first, i, gw, mark);
		if(u.second != -1)
			amax(r, mp(u.first + j->second, u.second));
	}
	return r;
}

int dfs2(int i, int p, const vector<vector<pair<int, int> > > &gw, const vector<bool> &mark) {
	int r = mark[i] ? 0 : -1;
	each(j, gw[i]) if(j->first != p) {
		int t = dfs2(j->first, i, gw, mark);
		if(t != -1) {
			if(r == -1) r = 0;
			r += t + j->second;
		}
	}
	return r;
}

int main() {
	int N; int K;
	while(~scanf("%d%d", &N, &K)) {
		vector<bool> mark(N);
		for(int i = 0; i < K; ++ i) {
			int A;
			scanf("%d", &A), -- A;
			mark[A] = true;
		}
		vector<vector<int> > g(N);
		vector<vector<pair<int, int> > > gw(N);
		for(int i = 0; i < N - 1; ++ i) {
			int u, v, w;
			scanf("%d%d%d", &u, &v, &w), -- u, -- v;
			g[u].push_back(v);
			g[v].push_back(u);
			gw[u].push_back(make_pair(v, w));
			gw[v].push_back(make_pair(u, w));
		}
		int a = find(all(mark), true) - mark.begin();
		int ans = 0;
		ans += dfs2(a, -1, gw, mark) * 2;
		int i = dfs1(a, -1, gw, mark).second;
		ans -= dfs1(i, -1, gw, mark).first;
		printf("%d\n", ans);
	}
	return 0;
}